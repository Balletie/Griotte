{
  "title": "The Model"
}
!The Model
@model

Griotte's model consists of several abstract classes which require to be implemented by a backend. In other words, the classes of the model define a set of operations and accessors which a backend should be able to perform and provide for. The model is defined as follows:

;==GrUser==
:A user represents someone that performs operations in a review. They can be asked for the repositories that they own.
;==GrRepository==
:A repository is in principle a collection of reviews. It can return the ''local reviews'', those active in Griotte, and non-local reviews.
:It allows for the creation of new reviews, through ==GrRepository>>newReviewWithTitle:description:==.
;==GrReview==
:A review is a request for a change to be integrated into the system. It supports two basic operations: ==GrReview>>approve== or ==GrReview>>reject==.
:It allows for a conversation of the review on a global level. These are called ''top-level comments''. They can be accessed with the ==GrReview>>comments== accessor. New top-level comments can be created using ==GrReview>>newCommentWithBody:==.
:Basic accessors are its title, its creator (which returns a ==GrUser==) and its description.
;==GrGroup==
:A ''group'' is a collection of related changes with a description. Comments can be added to groups too, allowing for a more detailed conversation. Groups can be generated by using the information provided by fine-grained IDE events.
:How groups are stored is defined by the backend which implements it.
;==GrComment==
:A comment can be made on either a review (the aforementioned top-level comments) or on a group of changes. The model makes no distinction between comments added to groups or to reviews â€” both are just comments.
:A backend can of course distinguish between these two if it is necessary for the implementation.
;==GrContext==
:A relatively late addition to the model, this class represents the connection between the repositories that are locally active (those with locally active reviews), and the user that is logged in.
:Griotte should allow for multiple contexts to be present at the same time, allowing to use different backends transparently, and for ''context switching''.
